app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  auth:
    dangerouslyDisableDefaultAuthPolicy: true
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    script-src: [ "'self'", "'unsafe-eval'", "'unsafe-inline'" ]
    imgSrc: ["'self'", "data:", "*"]
    frame-src: ["'self'", "*"]
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'


  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    guest: {}
#    github:
#      development:
#        clientId: ${AUTH_GITHUB_CLIENT_ID}
#        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  processingInterval: { minutes: 1 }
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    - type: url
      target: https://github.com/goafabric/backstage/blob/refactoring/catalog/entities-git.yaml

    - type: url
      target: https://github.com/goafabric/backstage/blob/refactoring/catalog/teams.yaml
      rules:
        - allow: [User, Group]

    - type: url
      target: https://github.com/goafabric/backstage/blob/refactoring/catalog/resources.yaml


# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true

proxy:
  endpoints:
    '/argocd/api':
      # url to the api of your hosted argoCD instance
      target: https://v2202402203466256255.megasrv.de/argocd/api/v1/
      changeOrigin: true
      # this line is required if your hosted argoCD instance has self-signed certificate
      secure: false
      headers:
        Cookie:
          $env: ARGOCD_AUTH_TOKEN

argocd:
  baseUrl: https://v2202402203466256255.megasrv.de/argocd

search:
  collators:
    techdocs:
      schedule: # same options as in SchedulerServiceTaskScheduleDefinition
        # supports cron, ISO duration, "human duration" as used in code
        initialDelay: { seconds: 20 }
        frequency: { hours: 1 }
        timeout: { minutes: 3 }